// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model User {
  id            Int       @id @default(autoincrement())
  name          String
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  accounts Account[]
  sessions Session[]

  clients   Client[]
  stores    Store[]
  reviews   Review[]
  addresses UserAddress[]
  cart      Cart[]
  orders Order[]
}

model Account {
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Client {
  id               Int      @id @default(autoincrement())
  user_id          Int
  flow_id          Int?
  name             String
  handle           String   @unique
  is_authenticated Boolean  @default(false)
  qr_code          String?
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  user     User      @relation(fields: [user_id], references: [id])
  flow     Flow?     @relation(fields: [flow_id], references: [id])
  contacts Contact[]
}

model Contact {
  id            Int      @id @default(autoincrement())
  client_id     Int
  number        String   @unique
  name          String?
  current_stage Int?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  client   Client?            @relation(fields: [client_id], references: [id])
  messages Message[]
  links    ContactStoreLink[]
}

model Flow {
  id         Int      @id @default(autoincrement())
  name       String
  greeting   String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  clients Client[]
}

model Message {
  id         Int      @id @default(autoincrement())
  contact_id Int
  message    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  contact Contact @relation(fields: [contact_id], references: [id])
}

model StoreType {
  id         Int      @id @default(autoincrement())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  stores Store[]
}

model Store {
  id                  Int      @id @default(autoincrement())
  type_id             Int
  user_id             Int
  name                String
  minimum_order_price Float?
  is_open             Boolean  @default(false)
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt

  type            StoreType             @relation(fields: [type_id], references: [id])
  user            User                  @relation(fields: [user_id], references: [id])
  reviews         Review[]
  promotions      Promotion[]
  categories      Category[]
  links           ContactStoreLink[]
  addresses       StoreAddress[]
  deliveryMethods StoreDeliveryMethod[]
  paymentMethods  StorePaymentMethod[]
  storeHours      StoreHours[]
}

model StoreHours {
  id          Int       @id @default(autoincrement())
  store_id    Int
  day_of_week DayOfWeek
  open_time   String
  close_time  String

  store Store @relation(fields: [store_id], references: [id])

  @@unique([store_id, day_of_week]) // ensure each store has unique hours per day
}

model Category {
  id         Int      @id @default(autoincrement())
  store_id   Int
  name       String
  is_active  Boolean  @default(true)
  order      Int?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  store    Store     @relation(fields: [store_id], references: [id])
  products Product[]
}

model Product {
  id          Int      @id @default(autoincrement())
  category_id Int
  name        String
  description String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  category   Category       @relation(fields: [category_id], references: [id])
  prices     ProductPrice[]
  images     ProductImage[]
  orderItems OrderItem[]
  cartItems  CartItem[]
}

model ProductPrice {
  id             Int      @id @default(autoincrement())
  product_id     Int
  price          Float
  effective_date DateTime
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  product Product @relation(fields: [product_id], references: [id])
}

model ProductImage {
  id         Int      @id @default(autoincrement())
  product_id Int
  path       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  product Product @relation(fields: [product_id], references: [id])
}

model Order {
  id                       Int      @id @default(autoincrement())
  user_id                  Int
  store_id                 Int
  store_delivery_method_id Int
  store_payment_method_id  Int
  created_at               DateTime @default(now())
  updated_at               DateTime @updatedAt

  user                User                @relation(fields: [user_id], references: [id])
  storeDeliveryMethod StoreDeliveryMethod @relation(fields: [store_delivery_method_id], references: [id])
  storePaymentMethod  StorePaymentMethod  @relation(fields: [store_payment_method_id], references: [id])
  items               OrderItem[]
}

model OrderItem {
  id         Int      @id @default(autoincrement())
  order_id   Int
  product_id Int
  quantity   Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  order   Order   @relation(fields: [order_id], references: [id])
  product Product @relation(fields: [product_id], references: [id])
}

model UserAddress {
  id          Int      @id @default(autoincrement())
  user_id     Int
  street      String
  number      String
  city        String
  postal_code String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id])
}

model StoreAddress {
  id          Int      @id @default(autoincrement())
  store_id    Int
  street      String
  city        String
  number      String
  postal_code String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  store Store @relation(fields: [store_id], references: [id])
}

model Review {
  id         Int      @id @default(autoincrement())
  store_id   Int
  user_id    Int
  rating     Float
  comment    String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  store Store @relation(fields: [store_id], references: [id])
  user  User  @relation(fields: [user_id], references: [id])
}

model Promotion {
  id         Int      @id @default(autoincrement())
  store_id   Int
  code       String   @unique
  discount   Float
  valid_from DateTime
  valid_to   DateTime
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  store Store @relation(fields: [store_id], references: [id])
}

model ContactStoreLink {
  id         Int      @id @default(autoincrement())
  contact_id Int
  store_id   Int
  unique_id  String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  contact Contact @relation(fields: [contact_id], references: [id])
  store   Store   @relation(fields: [store_id], references: [id])
}

model Cart {
  id         Int       @id @default(autoincrement())
  user_id    Int
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  user  User       @relation(fields: [user_id], references: [id])
  items CartItem[]
}

model CartItem {
  id         Int       @id @default(autoincrement())
  cart_id    Int
  product_id Int
  quantity   Int
  note       String?
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  cart    Cart    @relation(fields: [cart_id], references: [id])
  product Product @relation(fields: [product_id], references: [id])
}

model Lead {
  id             Int      @id @default(autoincrement())
  name           String
  email          String
  store_name     String
  phone_number   String
  orders_per_day Int
  has_computer   Boolean
  ifood_url      String?
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
}

model DeliveryMethod {
  id         Int      @id @default(autoincrement())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  storeDeloiveryMethods StoreDeliveryMethod[]
}

model PaymentMethod {
  id         Int      @id @default(autoincrement())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  storePaymentMethods StorePaymentMethod[]
}

model StoreDeliveryMethod {
  id Int @id @default(autoincrement())
  store_id           Int
  delivery_method_id Int

  store          Store          @relation(fields: [store_id], references: [id])
  deliveryMethod DeliveryMethod @relation(fields: [delivery_method_id], references: [id])
  orders Order[]
}

model StorePaymentMethod {
  id Int @id @default(autoincrement())
  store_id          Int
  payment_method_id Int

  store         Store         @relation(fields: [store_id], references: [id])
  paymentMethod PaymentMethod @relation(fields: [payment_method_id], references: [id])
  orders Order[]
}
